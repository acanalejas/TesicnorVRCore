//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.14.0
//     from Packages/com.tesicnor.tesicnorvrcore/Runtime/TesicnorVRCORE/Pseudo-Core/Input/CoreInteraction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

/// <summary>
/// Provides programmatic access to <see cref="InputActionAsset" />, <see cref="InputActionMap" />, <see cref="InputAction" /> and <see cref="InputControlScheme" /> instances defined in asset "Packages/com.tesicnor.tesicnorvrcore/Runtime/TesicnorVRCORE/Pseudo-Core/Input/CoreInteraction.inputactions".
/// </summary>
/// <remarks>
/// This class is source generated and any manual edits will be discarded if the associated asset is reimported or modified.
/// </remarks>
/// <example>
/// <code>
/// using namespace UnityEngine;
/// using UnityEngine.InputSystem;
///
/// // Example of using an InputActionMap named "Player" from a UnityEngine.MonoBehaviour implementing callback interface.
/// public class Example : MonoBehaviour, MyActions.IPlayerActions
/// {
///     private MyActions_Actions m_Actions;                  // Source code representation of asset.
///     private MyActions_Actions.PlayerActions m_Player;     // Source code representation of action map.
///
///     void Awake()
///     {
///         m_Actions = new MyActions_Actions();              // Create asset object.
///         m_Player = m_Actions.Player;                      // Extract action map object.
///         m_Player.AddCallbacks(this);                      // Register callback interface IPlayerActions.
///     }
///
///     void OnDestroy()
///     {
///         m_Actions.Dispose();                              // Destroy asset object.
///     }
///
///     void OnEnable()
///     {
///         m_Player.Enable();                                // Enable all actions within map.
///     }
///
///     void OnDisable()
///     {
///         m_Player.Disable();                               // Disable all actions within map.
///     }
///
///     #region Interface implementation of MyActions.IPlayerActions
///
///     // Invoked when "Move" action is either started, performed or canceled.
///     public void OnMove(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnMove: {context.ReadValue&lt;Vector2&gt;()}");
///     }
///
///     // Invoked when "Attack" action is either started, performed or canceled.
///     public void OnAttack(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnAttack: {context.ReadValue&lt;float&gt;()}");
///     }
///
///     #endregion
/// }
/// </code>
/// </example>
public partial class @CoreInteraction: IInputActionCollection2, IDisposable
{
    /// <summary>
    /// Provides access to the underlying asset instance.
    /// </summary>
    public InputActionAsset asset { get; }

    /// <summary>
    /// Constructs a new instance.
    /// </summary>
    public @CoreInteraction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CoreInteraction"",
    ""maps"": [
        {
            ""name"": ""Interaction"",
            ""id"": ""24ff6d40-a346-4b75-9ff3-df082840cdac"",
            ""actions"": [
                {
                    ""name"": ""Grab_Left"",
                    ""type"": ""Button"",
                    ""id"": ""f246f46c-cb80-4ef2-a396-35795815145c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Grab_Right"",
                    ""type"": ""Button"",
                    ""id"": ""845913c1-c63c-46ba-90f2-8b22d39241f7"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""cfa24ac9-b490-4f36-a8c6-0869689322f7"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightJoystick"",
                    ""type"": ""Value"",
                    ""id"": ""8384a273-c615-4e3d-829b-8714ad606bac"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LeftJoystick"",
                    ""type"": ""Value"",
                    ""id"": ""d252f713-801e-4d67-8f87-9915a09777c8"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightJoystickButton"",
                    ""type"": ""Button"",
                    ""id"": ""e545c850-55d6-4a0d-b290-2d843e0e1cc9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LeftJoystickButton"",
                    ""type"": ""Button"",
                    ""id"": ""d743c5d2-0d57-4c67-a0c6-594102588fd5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Click_right"",
                    ""type"": ""Button"",
                    ""id"": ""c0a252ca-3133-42ec-a326-274cc1ac207f"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Click_Left"",
                    ""type"": ""Button"",
                    ""id"": ""fa93b8e7-4ddf-4c9b-bc8f-b54b9355943c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3e377fab-815d-4e00-9849-dd7609b53f4f"",
                    ""path"": ""<XRController>{LeftHand}/{TriggerButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Grab_Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c12c74f6-c33a-42a0-a5ec-5bb19c549b7c"",
                    ""path"": ""<XRController>{LeftHand}/{GripButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Grab_Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e86fe2fb-d7b1-4c6d-9d7a-b8e0ef1a77d8"",
                    ""path"": ""<XRController>{RightHand}/{TriggerButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Grab_Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""de76f258-5719-47a1-be3b-60382dbb2c10"",
                    ""path"": ""<XRController>{RightHand}/{GripButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Grab_Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3a378f69-15f6-48b6-af30-251f2a5b9b9f"",
                    ""path"": ""<XRController>{LeftHand}/{MenuButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4069697c-239a-4ead-a892-043c4f7bc120"",
                    ""path"": ""<XRController>{RightHand}/{Primary2DAxis}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightJoystick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3fcc1f95-ba20-4bc9-bf38-1ededad1934e"",
                    ""path"": ""<XRController>{LeftHand}/{Primary2DAxis}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftJoystick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0f1fa45a-c780-4cff-bd0d-e4198699b625"",
                    ""path"": ""<XRController>{RightHand}/{Primary2DAxisClick}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightJoystickButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b6c454d2-98c2-4951-86a9-f7e5cec8e8b3"",
                    ""path"": ""<XRController>{LeftHand}/{Primary2DAxisClick}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftJoystickButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""afbbb403-c72e-4bcf-aee2-a9f12b899be0"",
                    ""path"": ""<XRController>{LeftHand}/{TriggerButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click_Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""13c95334-5b07-4aed-aa98-748b0664dc1a"",
                    ""path"": ""<XRController>{RightHand}/{TriggerButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click_right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Interaction
        m_Interaction = asset.FindActionMap("Interaction", throwIfNotFound: true);
        m_Interaction_Grab_Left = m_Interaction.FindAction("Grab_Left", throwIfNotFound: true);
        m_Interaction_Grab_Right = m_Interaction.FindAction("Grab_Right", throwIfNotFound: true);
        m_Interaction_Pause = m_Interaction.FindAction("Pause", throwIfNotFound: true);
        m_Interaction_RightJoystick = m_Interaction.FindAction("RightJoystick", throwIfNotFound: true);
        m_Interaction_LeftJoystick = m_Interaction.FindAction("LeftJoystick", throwIfNotFound: true);
        m_Interaction_RightJoystickButton = m_Interaction.FindAction("RightJoystickButton", throwIfNotFound: true);
        m_Interaction_LeftJoystickButton = m_Interaction.FindAction("LeftJoystickButton", throwIfNotFound: true);
        m_Interaction_Click_right = m_Interaction.FindAction("Click_right", throwIfNotFound: true);
        m_Interaction_Click_Left = m_Interaction.FindAction("Click_Left", throwIfNotFound: true);
    }

    ~@CoreInteraction()
    {
        UnityEngine.Debug.Assert(!m_Interaction.enabled, "This will cause a leak and performance issues, CoreInteraction.Interaction.Disable() has not been called.");
    }

    /// <summary>
    /// Destroys this asset and all associated <see cref="InputAction"/> instances.
    /// </summary>
    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindingMask" />
    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.devices" />
    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.controlSchemes" />
    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Contains(InputAction)" />
    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.GetEnumerator()" />
    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    /// <inheritdoc cref="IEnumerable.GetEnumerator()" />
    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Enable()" />
    public void Enable()
    {
        asset.Enable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Disable()" />
    public void Disable()
    {
        asset.Disable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindings" />
    public IEnumerable<InputBinding> bindings => asset.bindings;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindAction(string, bool)" />
    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindBinding(InputBinding, out InputAction)" />
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Interaction
    private readonly InputActionMap m_Interaction;
    private List<IInteractionActions> m_InteractionActionsCallbackInterfaces = new List<IInteractionActions>();
    private readonly InputAction m_Interaction_Grab_Left;
    private readonly InputAction m_Interaction_Grab_Right;
    private readonly InputAction m_Interaction_Pause;
    private readonly InputAction m_Interaction_RightJoystick;
    private readonly InputAction m_Interaction_LeftJoystick;
    private readonly InputAction m_Interaction_RightJoystickButton;
    private readonly InputAction m_Interaction_LeftJoystickButton;
    private readonly InputAction m_Interaction_Click_right;
    private readonly InputAction m_Interaction_Click_Left;
    /// <summary>
    /// Provides access to input actions defined in input action map "Interaction".
    /// </summary>
    public struct InteractionActions
    {
        private @CoreInteraction m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public InteractionActions(@CoreInteraction wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "Interaction/Grab_Left".
        /// </summary>
        public InputAction @Grab_Left => m_Wrapper.m_Interaction_Grab_Left;
        /// <summary>
        /// Provides access to the underlying input action "Interaction/Grab_Right".
        /// </summary>
        public InputAction @Grab_Right => m_Wrapper.m_Interaction_Grab_Right;
        /// <summary>
        /// Provides access to the underlying input action "Interaction/Pause".
        /// </summary>
        public InputAction @Pause => m_Wrapper.m_Interaction_Pause;
        /// <summary>
        /// Provides access to the underlying input action "Interaction/RightJoystick".
        /// </summary>
        public InputAction @RightJoystick => m_Wrapper.m_Interaction_RightJoystick;
        /// <summary>
        /// Provides access to the underlying input action "Interaction/LeftJoystick".
        /// </summary>
        public InputAction @LeftJoystick => m_Wrapper.m_Interaction_LeftJoystick;
        /// <summary>
        /// Provides access to the underlying input action "Interaction/RightJoystickButton".
        /// </summary>
        public InputAction @RightJoystickButton => m_Wrapper.m_Interaction_RightJoystickButton;
        /// <summary>
        /// Provides access to the underlying input action "Interaction/LeftJoystickButton".
        /// </summary>
        public InputAction @LeftJoystickButton => m_Wrapper.m_Interaction_LeftJoystickButton;
        /// <summary>
        /// Provides access to the underlying input action "Interaction/Click_right".
        /// </summary>
        public InputAction @Click_right => m_Wrapper.m_Interaction_Click_right;
        /// <summary>
        /// Provides access to the underlying input action "Interaction/Click_Left".
        /// </summary>
        public InputAction @Click_Left => m_Wrapper.m_Interaction_Click_Left;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_Interaction; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="InteractionActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(InteractionActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="InteractionActions" />
        public void AddCallbacks(IInteractionActions instance)
        {
            if (instance == null || m_Wrapper.m_InteractionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InteractionActionsCallbackInterfaces.Add(instance);
            @Grab_Left.started += instance.OnGrab_Left;
            @Grab_Left.performed += instance.OnGrab_Left;
            @Grab_Left.canceled += instance.OnGrab_Left;
            @Grab_Right.started += instance.OnGrab_Right;
            @Grab_Right.performed += instance.OnGrab_Right;
            @Grab_Right.canceled += instance.OnGrab_Right;
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
            @RightJoystick.started += instance.OnRightJoystick;
            @RightJoystick.performed += instance.OnRightJoystick;
            @RightJoystick.canceled += instance.OnRightJoystick;
            @LeftJoystick.started += instance.OnLeftJoystick;
            @LeftJoystick.performed += instance.OnLeftJoystick;
            @LeftJoystick.canceled += instance.OnLeftJoystick;
            @RightJoystickButton.started += instance.OnRightJoystickButton;
            @RightJoystickButton.performed += instance.OnRightJoystickButton;
            @RightJoystickButton.canceled += instance.OnRightJoystickButton;
            @LeftJoystickButton.started += instance.OnLeftJoystickButton;
            @LeftJoystickButton.performed += instance.OnLeftJoystickButton;
            @LeftJoystickButton.canceled += instance.OnLeftJoystickButton;
            @Click_right.started += instance.OnClick_right;
            @Click_right.performed += instance.OnClick_right;
            @Click_right.canceled += instance.OnClick_right;
            @Click_Left.started += instance.OnClick_Left;
            @Click_Left.performed += instance.OnClick_Left;
            @Click_Left.canceled += instance.OnClick_Left;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="InteractionActions" />
        private void UnregisterCallbacks(IInteractionActions instance)
        {
            @Grab_Left.started -= instance.OnGrab_Left;
            @Grab_Left.performed -= instance.OnGrab_Left;
            @Grab_Left.canceled -= instance.OnGrab_Left;
            @Grab_Right.started -= instance.OnGrab_Right;
            @Grab_Right.performed -= instance.OnGrab_Right;
            @Grab_Right.canceled -= instance.OnGrab_Right;
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
            @RightJoystick.started -= instance.OnRightJoystick;
            @RightJoystick.performed -= instance.OnRightJoystick;
            @RightJoystick.canceled -= instance.OnRightJoystick;
            @LeftJoystick.started -= instance.OnLeftJoystick;
            @LeftJoystick.performed -= instance.OnLeftJoystick;
            @LeftJoystick.canceled -= instance.OnLeftJoystick;
            @RightJoystickButton.started -= instance.OnRightJoystickButton;
            @RightJoystickButton.performed -= instance.OnRightJoystickButton;
            @RightJoystickButton.canceled -= instance.OnRightJoystickButton;
            @LeftJoystickButton.started -= instance.OnLeftJoystickButton;
            @LeftJoystickButton.performed -= instance.OnLeftJoystickButton;
            @LeftJoystickButton.canceled -= instance.OnLeftJoystickButton;
            @Click_right.started -= instance.OnClick_right;
            @Click_right.performed -= instance.OnClick_right;
            @Click_right.canceled -= instance.OnClick_right;
            @Click_Left.started -= instance.OnClick_Left;
            @Click_Left.performed -= instance.OnClick_Left;
            @Click_Left.canceled -= instance.OnClick_Left;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="InteractionActions.UnregisterCallbacks(IInteractionActions)" />.
        /// </summary>
        /// <seealso cref="InteractionActions.UnregisterCallbacks(IInteractionActions)" />
        public void RemoveCallbacks(IInteractionActions instance)
        {
            if (m_Wrapper.m_InteractionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="InteractionActions.AddCallbacks(IInteractionActions)" />
        /// <seealso cref="InteractionActions.RemoveCallbacks(IInteractionActions)" />
        /// <seealso cref="InteractionActions.UnregisterCallbacks(IInteractionActions)" />
        public void SetCallbacks(IInteractionActions instance)
        {
            foreach (var item in m_Wrapper.m_InteractionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InteractionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="InteractionActions" /> instance referencing this action map.
    /// </summary>
    public InteractionActions @Interaction => new InteractionActions(this);
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Interaction" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="InteractionActions.AddCallbacks(IInteractionActions)" />
    /// <seealso cref="InteractionActions.RemoveCallbacks(IInteractionActions)" />
    public interface IInteractionActions
    {
        /// <summary>
        /// Method invoked when associated input action "Grab_Left" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnGrab_Left(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Grab_Right" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnGrab_Right(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Pause" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPause(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "RightJoystick" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnRightJoystick(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "LeftJoystick" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnLeftJoystick(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "RightJoystickButton" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnRightJoystickButton(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "LeftJoystickButton" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnLeftJoystickButton(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Click_right" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnClick_right(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Click_Left" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnClick_Left(InputAction.CallbackContext context);
    }
}
